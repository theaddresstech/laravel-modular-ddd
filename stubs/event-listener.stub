<?php

declare(strict_types=1);

namespace Modules\{{ module }}\Application\Listeners;

use Modules\{{ module }}\Domain\Events\{{ event }};
use Psr\Log\LoggerInterface;

final class {{ name }}
{
    public function __construct(
        private LoggerInterface $logger
    ) {}

    public function handle({{ event }} ${{ eventVariable }}): void
    {
        $this->logger->info('{{ name }} handling event', [
            'event_id' => ${{ eventVariable }}->getEventId(),
            'event_type' => ${{ eventVariable }}->getEventType(),
            'aggregate_id' => ${{ eventVariable }}->getAggregateId()->toString(),
        ]);

        try {
            $this->process{{ event }}(${{ eventVariable }});

            $this->logger->info('{{ name }} successfully processed event', [
                'event_id' => ${{ eventVariable }}->getEventId(),
                'aggregate_id' => ${{ eventVariable }}->getAggregateId()->toString(),
            ]);

        } catch (\Exception $e) {
            $this->logger->error('Error in {{ name }}', [
                'event_id' => ${{ eventVariable }}->getEventId(),
                'aggregate_id' => ${{ eventVariable }}->getAggregateId()->toString(),
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
            ]);

            throw $e;
        }
    }

    private function process{{ event }}({{ event }} ${{ eventVariable }}): void
    {
        // Implement your business logic here
        // Examples:
        // - Send email notifications
        // - Update read models
        // - Call external APIs
        // - Update cache
        // - Trigger other domain events

        $payload = ${{ eventVariable }}->getPayload();

        $this->logger->debug('Processing {{ event }} with payload', $payload);

        // Your implementation here...
    }
}