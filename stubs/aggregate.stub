<?php

declare(strict_types=1);

namespace {{NAMESPACE}};

use {{NAMESPACE_MODULE}}\Domain\ValueObjects\{{AGGREGATE}}Id;
use {{NAMESPACE_MODULE}}\Domain\Events\{{AGGREGATE}}Created;
use {{NAMESPACE_MODULE}}\Domain\Events\{{AGGREGATE}}NameChanged;
use TaiCrm\LaravelModularDdd\Foundation\AggregateRoot;

class {{AGGREGATE}} extends AggregateRoot
{
    private \DateTimeImmutable $createdAt;
    private \DateTimeImmutable $updatedAt;

    public function __construct(
        private {{AGGREGATE}}Id $id,
        private string $name,
        ?\DateTimeImmutable $createdAt = null,
        ?\DateTimeImmutable $updatedAt = null
    ) {
        parent::__construct();
        $this->createdAt = $createdAt ?? new \DateTimeImmutable();
        $this->updatedAt = $updatedAt ?? new \DateTimeImmutable();
    }

    public static function create({{AGGREGATE}}Id $id, string $name): self
    {
        $instance = new self($id, $name);

        $instance->recordEvent(new {{AGGREGATE}}Created(
            $id->toString(),
            $name,
            $instance->createdAt
        ));

        return $instance;
    }

    public function getId(): {{AGGREGATE}}Id
    {
        return $this->id;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function getCreatedAt(): \DateTimeImmutable
    {
        return $this->createdAt;
    }

    public function getUpdatedAt(): \DateTimeImmutable
    {
        return $this->updatedAt;
    }

    public function changeName(string $name): void
    {
        if ($this->name === $name) {
            return;
        }

        $oldName = $this->name;
        $this->name = $name;
        $this->updatedAt = new \DateTimeImmutable();

        $this->recordEvent(new {{AGGREGATE}}NameChanged(
            $this->id->toString(),
            $oldName,
            $name,
            $this->updatedAt
        ));
    }
}