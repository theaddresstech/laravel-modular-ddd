<?php

declare(strict_types=1);

namespace Modules\{{ module }}\Domain\Models;

use Modules\{{ module }}\Domain\ValueObjects\{{ name }}Id;
use Modules\{{ module }}\Domain\Events\{{ name }}Created;
use Modules\{{ module }}\Domain\Events\{{ name }}Updated;
use TaiCrm\LaravelModularDdd\Foundation\AggregateRoot;

class {{ name }} extends AggregateRoot
{
    private function __construct(
        private {{ name }}Id $id,
        private string $name,
        private string $description,
        private bool $status,
        private \DateTimeImmutable $createdAt,
        private ?\DateTimeImmutable $updatedAt = null,
        private bool $isDeleted = false
    ) {
        parent::__construct();
    }

    public static function create(
        {{ name }}Id $id,
        string $name,
        string $description = ''
    ): self {
        ${{ nameSnake }} = new self(
            $id,
            $name,
            $description,
            true,
            new \DateTimeImmutable()
        );

        ${{ nameSnake }}->recordEvent(new {{ name }}Created(
            $id,
            $name,
            $description,
            ${{ nameSnake }}->createdAt
        ));

        return ${{ nameSnake }};
    }

    public static function reconstitute(
        {{ name }}Id $id,
        string $name,
        string $description,
        bool $status,
        \DateTimeImmutable $createdAt,
        ?\DateTimeImmutable $updatedAt = null
    ): self {
        return new self($id, $name, $description, $status, $createdAt, $updatedAt);
    }

    public function updateName(string $newName): void
    {
        if ($this->name === $newName) {
            return;
        }

        $oldName = $this->name;
        $this->name = $newName;
        $this->updatedAt = new \DateTimeImmutable();

        $this->recordEvent(new {{ name }}Updated(
            $this->id,
            $oldName,
            $newName,
            $this->updatedAt
        ));
    }

    public function updateDescription(string $newDescription): void
    {
        if ($this->description === $newDescription) {
            return;
        }

        $this->description = $newDescription;
        $this->updatedAt = new \DateTimeImmutable();
    }

    public function updateStatus(bool $newStatus): void
    {
        if ($this->status === $newStatus) {
            return;
        }

        $this->status = $newStatus;
        $this->updatedAt = new \DateTimeImmutable();
    }

    public function markAsDeleted(): void
    {
        if ($this->isDeleted) {
            return;
        }

        $this->isDeleted = true;
        $this->updatedAt = new \DateTimeImmutable();

        // Record deletion event if needed
        // $this->recordEvent(new {{ name }}Deleted($this->id, $this->updatedAt));
    }

    // Getters
    public function getId(): {{ name }}Id
    {
        return $this->id;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function getDescription(): string
    {
        return $this->description;
    }

    public function getStatus(): bool
    {
        return $this->status;
    }

    public function isDeleted(): bool
    {
        return $this->isDeleted;
    }

    public function getCreatedAt(): \DateTimeImmutable
    {
        return $this->createdAt;
    }

    public function getUpdatedAt(): ?\DateTimeImmutable
    {
        return $this->updatedAt;
    }

    public function toArray(): array
    {
        return [
            'id' => $this->id->toString(),
            'name' => $this->name,
            'description' => $this->description,
            'status' => $this->status,
            'is_deleted' => $this->isDeleted,
            'created_at' => $this->createdAt->format('Y-m-d H:i:s'),
            'updated_at' => $this->updatedAt?->format('Y-m-d H:i:s'),
        ];
    }
}