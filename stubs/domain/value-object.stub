<?php

declare(strict_types=1);

namespace Modules\{{ module }}\Domain\ValueObjects;

use TaiCrm\LaravelModularDdd\Foundation\ValueObject;

readonly class {{ name }} extends ValueObject
{
    public function __construct(
        private string $value
    ) {
        $this->validate($value);
    }

    public static function fromString(string $value): self
    {
        return new self($value);
    }

    public function toString(): string
    {
        return $this->value;
    }

    public function equals(object $other): bool
    {
        return $other instanceof self &&
               $this->value === $other->value;
    }

    private function validate(string $value): void
    {
        if (empty(trim($value))) {
            throw new \InvalidArgumentException(
                '{{ name }} cannot be empty'
            );
        }

        // Add your custom validation rules here
        // Example:
        // if (strlen($value) > 255) {
        //     throw new \InvalidArgumentException(
        //         '{{ name }} cannot exceed 255 characters'
        //     );
        // }
    }

    public function __toString(): string
    {
        return $this->toString();
    }

    public function jsonSerialize(): string
    {
        return $this->toString();
    }
}