<?php

declare(strict_types=1);

namespace {{NAMESPACE}}\Application\Listeners;

use {{NAMESPACE}}\Domain\Events\{{AGGREGATE}}Created;
use Psr\Log\LoggerInterface;

final class {{AGGREGATE}}CreatedListener
{
    public function __construct(
        private LoggerInterface $logger
    ) {}

    public function handle({{AGGREGATE}}Created $event): void
    {
        $this->logger->info('{{AGGREGATE}}CreatedListener handling event', [
            'event_id' => $event->getEventId(),
            'event_type' => $event->getEventType(),
            '{{AGGREGATE_VARIABLE}}_id' => $event->get{{AGGREGATE}}Id(),
            'name' => $event->getName(),
        ]);

        try {
            $this->process{{AGGREGATE}}Created($event);

        } catch (\Exception $e) {
            $this->logger->error('Error in {{AGGREGATE}}CreatedListener', [
                'event_id' => $event->getEventId(),
                '{{AGGREGATE_VARIABLE}}_id' => $event->get{{AGGREGATE}}Id(),
                'error' => $e->getMessage(),
                'exception' => $e,
            ]);

            throw $e;
        }
    }

    private function process{{AGGREGATE}}Created({{AGGREGATE}}Created $event): void
    {
        // Implement your business logic here
        // Examples:
        // - Send welcome email
        // - Update analytics
        // - Create audit log entry
        // - Trigger downstream processes
        // - Update read models
        // - Cache invalidation

        // Example implementation:
        // $this->emailService->sendWelcomeEmail(
        //     $event->get{{AGGREGATE}}Id(),
        //     $event->getName()
        // );
    }
}