<?php

declare(strict_types=1);

namespace {{MODULE_NAMESPACE}}\Http\Requests\{{RESOURCE_NAME}};

use Illuminate\Foundation\Http\FormRequest;

/**
 * @OA\Schema(
 *     schema="Create{{RESOURCE_NAME}}Request",
 *     type="object",
 *     title="Create {{RESOURCE_NAME}} Request",
 *     description="Request validation schema for creating a new {{RESOURCE_NAME}}",
 *     required={"name"},
 *     @OA\Property(
 *         property="name",
 *         type="string",
 *         maxLength=255,
 *         description="The name of the {{RESOURCE_NAME}}",
 *         example="Example {{RESOURCE_NAME}} Name"
 *     ),
 *     @OA\Property(
 *         property="description",
 *         type="string",
 *         nullable=true,
 *         description="Optional description of the {{RESOURCE_NAME}}",
 *         example="This is a detailed description of the {{RESOURCE_NAME}}"
 *     ),
 *     @OA\Property(
 *         property="status",
 *         type="boolean",
 *         description="Status of the {{RESOURCE_NAME}} (active/inactive)",
 *         default=true,
 *         example=true
 *     ),
 *     @OA\Property(
 *         property="metadata",
 *         type="object",
 *         nullable=true,
 *         description="Additional metadata for the {{RESOURCE_NAME}}",
 *         @OA\AdditionalProperties(
 *             oneOf={
 *                 @OA\Schema(type="string"),
 *                 @OA\Schema(type="number"),
 *                 @OA\Schema(type="boolean")
 *             }
 *         ),
 *         example={"category": "premium", "priority": 1, "featured": true}
 *     )
 * )
 */
class Create{{RESOURCE_NAME}}Request extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        // Authorization logic can be added here
        // For now, allow all authenticated requests
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
{{VALIDATION_RULES}}
        ];
    }

    /**
     * Get custom error messages for validation rules.
     *
     * @return array<string, string>
     */
    public function messages(): array
    {
        return [
            'name.required' => 'The {{RESOURCE_NAME}} name is required.',
            'name.string' => 'The {{RESOURCE_NAME}} name must be a valid string.',
            'name.max' => 'The {{RESOURCE_NAME}} name cannot exceed 255 characters.',
            'name.unique' => 'A {{RESOURCE_NAME}} with this name already exists.',
            'description.string' => 'The description must be a valid string.',
            'description.max' => 'The description cannot exceed 1000 characters.',
            'status.boolean' => 'The status must be true or false.',
            'metadata.array' => 'The metadata must be a valid JSON object.',
        ];
    }

    /**
     * Get custom attribute names for validator errors.
     *
     * @return array<string, string>
     */
    public function attributes(): array
    {
        return [
            'name' => '{{RESOURCE_NAME}} name',
            'description' => '{{RESOURCE_NAME}} description',
            'status' => '{{RESOURCE_NAME}} status',
            'metadata' => '{{RESOURCE_NAME}} metadata',
        ];
    }

    /**
     * Configure the validator instance.
     *
     * @param  \Illuminate\Validation\Validator  $validator
     * @return void
     */
    public function withValidator($validator): void
    {
        $validator->after(function ($validator) {
            // Custom validation logic can be added here
            $name = $this->input('name');
            if ($name && str_contains(strtolower($name), 'test') && app()->environment('production')) {
                $validator->errors()->add('name', 'Test {{RESOURCE_NAME}}s are not allowed in production.');
            }
        });
    }

    /**
     * Prepare the data for validation.
     */
    protected function prepareForValidation(): void
    {
        // Clean and prepare data before validation
        if ($this->has('name')) {
            $this->merge([
                'name' => trim($this->input('name')),
            ]);
        }

        // Set default status if not provided
        if (!$this->has('status')) {
            $this->merge([
                'status' => true,
            ]);
        }
    }

    /**
     * Get validated data with additional processing.
     *
     * @param array|null $key
     * @param mixed $default
     * @return array|mixed
     */
    public function validated($key = null, $default = null)
    {
        $validated = parent::validated($key, $default);

        // Additional processing of validated data
        if (is_array($validated) && isset($validated['metadata'])) {
            // Ensure metadata is properly formatted
            $validated['metadata'] = is_string($validated['metadata'])
                ? json_decode($validated['metadata'], true)
                : $validated['metadata'];
        }

        return $validated;
    }
}