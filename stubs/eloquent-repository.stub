<?php

declare(strict_types=1);

namespace {{NAMESPACE}};

use {{NAMESPACE_MODULE}}\Domain\Models\{{AGGREGATE}};
use {{NAMESPACE_MODULE}}\Domain\ValueObjects\{{AGGREGATE}}Id;
use {{NAMESPACE_MODULE}}\Domain\Repositories\{{AGGREGATE}}RepositoryInterface;
use {{NAMESPACE_MODULE}}\Infrastructure\Persistence\Eloquent\Models\{{AGGREGATE}} as {{AGGREGATE}}Model;
use Illuminate\Support\Collection;

class Eloquent{{AGGREGATE}}Repository implements {{AGGREGATE}}RepositoryInterface
{
    public function save({{AGGREGATE}} ${{AGGREGATE_LOWER}}): void
    {
        $model = {{AGGREGATE}}Model::firstOrNew([
            'id' => ${{AGGREGATE_LOWER}}->getId()->toString()
        ]);

        $model->fill([
            'name' => ${{AGGREGATE_LOWER}}->getName(),
            // Map other properties
        ]);

        $model->save();
    }

    public function findById({{AGGREGATE}}Id $id): ?{{AGGREGATE}}
    {
        $model = {{AGGREGATE}}Model::find($id->toString());

        if (!$model) {
            return null;
        }

        return $this->modelToDomain($model);
    }

    public function findAll(): Collection
    {
        $models = {{AGGREGATE}}Model::all();

        return $models->map(fn($model) => $this->modelToDomain($model));
    }

    public function remove({{AGGREGATE}}Id $id): void
    {
        {{AGGREGATE}}Model::where('id', $id->toString())->delete();
    }

    public function exists({{AGGREGATE}}Id $id): bool
    {
        return {{AGGREGATE}}Model::where('id', $id->toString())->exists();
    }

    private function modelToDomain({{AGGREGATE}}Model $model): {{AGGREGATE}}
    {
        return {{AGGREGATE}}::create(
            {{AGGREGATE}}Id::fromString($model->id),
            $model->name
            // Map other properties
        );
    }
}