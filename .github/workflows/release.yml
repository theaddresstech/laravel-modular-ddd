name: Release

on:
  push:
    tags:
      - 'v*'

env:
  PHP_VERSION: '8.2'

jobs:
  validate:
    runs-on: ubuntu-latest
    name: Validate Release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, bcmath, gd, redis, pdo_mysql, pdo_sqlite
          coverage: pcov
          tools: composer:v2

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader

      - name: Validate package structure
        run: php scripts/validate-package.php

      - name: Run tests
        run: vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml

      - name: Run static analysis (Psalm)
        run: vendor/bin/psalm --output-format=github --no-progress
        continue-on-error: true

      - name: Check code style
        run: vendor/bin/php-cs-fixer fix --dry-run --diff
        continue-on-error: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  create-release:
    runs-on: ubuntu-latest
    needs: validate
    permissions:
      contents: write
    name: Create GitHub Release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION=${{ steps.get_version.outputs.version }}

          # Extract changelog for this version
          awk -v version="$VERSION" '
            /^## \[/ {
              if ($0 ~ "\\[" version "\\]") {
                found = 1
                next
              } else if (found) {
                exit
              }
            }
            found && /^## \[/ { exit }
            found { print }
          ' CHANGELOG.md > RELEASE_NOTES.md

          # Set output for GitHub release
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat RELEASE_NOTES.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.tag }}
          tag_name: ${{ steps.get_version.outputs.tag }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-packagist:
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    name: Notify Packagist
    if: ${{ !contains(github.ref_name, '-') }} # Only for stable releases

    steps:
      - name: Notify Packagist
        run: |
          if [ -n "${{ secrets.PACKAGIST_API_TOKEN }}" ]; then
            curl -XPOST -H'content-type:application/json' \
                 'https://packagist.org/api/update-package?username=${{ secrets.PACKAGIST_USERNAME }}&apiToken=${{ secrets.PACKAGIST_API_TOKEN }}' \
                 -d'{"repository":{"url":"https://packagist.org/packages/tai-crm/laravel-modular-ddd"}}'
            echo "Packagist notified successfully"
          else
            echo "PACKAGIST_API_TOKEN not set, skipping Packagist notification"
          fi

  docker-release:
    runs-on: ubuntu-latest
    needs: validate
    name: Build and Push Docker Images

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: ${{ secrets.DOCKER_USERNAME }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        if: ${{ secrets.DOCKER_USERNAME }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            taicrm/laravel-modular-ddd:latest
            taicrm/laravel-modular-ddd:${{ steps.get_version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: validate
    name: Security Scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, bcmath, gd
          tools: composer:v2

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run security audit
        run: composer audit --format=plain

      - name: Run Psalm security analysis
        run: vendor/bin/psalm --taint-analysis --report=results.sarif
        continue-on-error: true

      - name: Upload SARIF file
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  post-release:
    runs-on: ubuntu-latest
    needs: [create-release, docker-release]
    name: Post Release Tasks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create post-release issue
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.get_version.outputs.version }}';

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Post-release tasks for v${version}`,
              body: `## Post-release checklist for v${version}

            - [ ] Update documentation website
            - [ ] Announce release on social media
            - [ ] Update example projects
            - [ ] Check Packagist listing
            - [ ] Monitor for issues and bug reports
            - [ ] Update internal documentation
            - [ ] Plan next release features

            **Release URL:** ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${version}`,
              labels: ['release', 'maintenance']
            });

            console.log(`Created post-release issue #${issue.data.number}`);

      - name: Send notification
        if: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          RELEASE_URL="${{ github.server_url }}/${{ github.repository }}/releases/tag/v$VERSION"

          curl -X POST -H 'Content-type: application/json' \
               --data "{\"text\":\"ðŸš€ Laravel Modular DDD v$VERSION has been released!\n$RELEASE_URL\"}" \
               ${{ secrets.SLACK_WEBHOOK }}